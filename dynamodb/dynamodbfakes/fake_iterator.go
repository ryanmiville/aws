// Code generated by counterfeiter. DO NOT EDIT.
package dynamodbfakes

import (
	"context"
	"sync"

	"github.com/ryanmiville/aws/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/expression"
)

type FakeIterator struct {
	DocumentStub        func() interface{}
	documentMutex       sync.RWMutex
	documentArgsForCall []struct {
	}
	documentReturns struct {
		result1 interface{}
	}
	documentReturnsOnCall map[int]struct {
		result1 interface{}
	}
	ErrStub        func() error
	errMutex       sync.RWMutex
	errArgsForCall []struct {
	}
	errReturns struct {
		result1 error
	}
	errReturnsOnCall map[int]struct {
		result1 error
	}
	ExpressionStub        func(expression.Builder)
	expressionMutex       sync.RWMutex
	expressionArgsForCall []struct {
		arg1 expression.Builder
	}
	NextStub        func(context.Context) bool
	nextMutex       sync.RWMutex
	nextArgsForCall []struct {
		arg1 context.Context
	}
	nextReturns struct {
		result1 bool
	}
	nextReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIterator) Document() interface{} {
	fake.documentMutex.Lock()
	ret, specificReturn := fake.documentReturnsOnCall[len(fake.documentArgsForCall)]
	fake.documentArgsForCall = append(fake.documentArgsForCall, struct {
	}{})
	fake.recordInvocation("Document", []interface{}{})
	fake.documentMutex.Unlock()
	if fake.DocumentStub != nil {
		return fake.DocumentStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.documentReturns
	return fakeReturns.result1
}

func (fake *FakeIterator) DocumentCallCount() int {
	fake.documentMutex.RLock()
	defer fake.documentMutex.RUnlock()
	return len(fake.documentArgsForCall)
}

func (fake *FakeIterator) DocumentCalls(stub func() interface{}) {
	fake.documentMutex.Lock()
	defer fake.documentMutex.Unlock()
	fake.DocumentStub = stub
}

func (fake *FakeIterator) DocumentReturns(result1 interface{}) {
	fake.documentMutex.Lock()
	defer fake.documentMutex.Unlock()
	fake.DocumentStub = nil
	fake.documentReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeIterator) DocumentReturnsOnCall(i int, result1 interface{}) {
	fake.documentMutex.Lock()
	defer fake.documentMutex.Unlock()
	fake.DocumentStub = nil
	if fake.documentReturnsOnCall == nil {
		fake.documentReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.documentReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeIterator) Err() error {
	fake.errMutex.Lock()
	ret, specificReturn := fake.errReturnsOnCall[len(fake.errArgsForCall)]
	fake.errArgsForCall = append(fake.errArgsForCall, struct {
	}{})
	fake.recordInvocation("Err", []interface{}{})
	fake.errMutex.Unlock()
	if fake.ErrStub != nil {
		return fake.ErrStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.errReturns
	return fakeReturns.result1
}

func (fake *FakeIterator) ErrCallCount() int {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return len(fake.errArgsForCall)
}

func (fake *FakeIterator) ErrCalls(stub func() error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = stub
}

func (fake *FakeIterator) ErrReturns(result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	fake.errReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIterator) ErrReturnsOnCall(i int, result1 error) {
	fake.errMutex.Lock()
	defer fake.errMutex.Unlock()
	fake.ErrStub = nil
	if fake.errReturnsOnCall == nil {
		fake.errReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.errReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIterator) Expression(arg1 expression.Builder) {
	fake.expressionMutex.Lock()
	fake.expressionArgsForCall = append(fake.expressionArgsForCall, struct {
		arg1 expression.Builder
	}{arg1})
	fake.recordInvocation("Expression", []interface{}{arg1})
	fake.expressionMutex.Unlock()
	if fake.ExpressionStub != nil {
		fake.ExpressionStub(arg1)
	}
}

func (fake *FakeIterator) ExpressionCallCount() int {
	fake.expressionMutex.RLock()
	defer fake.expressionMutex.RUnlock()
	return len(fake.expressionArgsForCall)
}

func (fake *FakeIterator) ExpressionCalls(stub func(expression.Builder)) {
	fake.expressionMutex.Lock()
	defer fake.expressionMutex.Unlock()
	fake.ExpressionStub = stub
}

func (fake *FakeIterator) ExpressionArgsForCall(i int) expression.Builder {
	fake.expressionMutex.RLock()
	defer fake.expressionMutex.RUnlock()
	argsForCall := fake.expressionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIterator) Next(arg1 context.Context) bool {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Next", []interface{}{arg1})
	fake.nextMutex.Unlock()
	if fake.NextStub != nil {
		return fake.NextStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nextReturns
	return fakeReturns.result1
}

func (fake *FakeIterator) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeIterator) NextCalls(stub func(context.Context) bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = stub
}

func (fake *FakeIterator) NextArgsForCall(i int) context.Context {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	argsForCall := fake.nextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIterator) NextReturns(result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIterator) NextReturnsOnCall(i int, result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIterator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.documentMutex.RLock()
	defer fake.documentMutex.RUnlock()
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	fake.expressionMutex.RLock()
	defer fake.expressionMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIterator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dynamodb.Iterator = new(FakeIterator)
